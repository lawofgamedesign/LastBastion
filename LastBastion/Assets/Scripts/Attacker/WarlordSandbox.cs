using UnityEngine;
using UnityEngine.UI;

public class WarlordSandbox : AttackerSandbox {


	/////////////////////////////////////////////
	/// Fields
	/////////////////////////////////////////////


	//warlords have a button that they switch on when an explanation of the warlord is needed
	protected GameObject explanationBubble;
	protected const string EXPLANATION_OBJ = "Explanation bubble";
	protected const string UI_CANVAS = "Private UI canvas";


	//UI for warlord health
	protected Image healthUI;
	protected const string HEALTH_IMAGE = "Health image";


	//starting health
	protected int startHealth;



	/////////////////////////////////////////////
	/// Functions
	/////////////////////////////////////////////


	//warlords have to set up their explanation bubble
	public override void Setup(){
		base.Setup();
		healthUI = transform.Find(UI_CANVAS).Find(HEALTH_IMAGE).GetComponent<Image>();
		explanationBubble = transform.Find(UI_CANVAS).Find(EXPLANATION_OBJ).gameObject;
		explanationBubble.SetActive(false);
	}


	protected override void RegisterForEvents(){
		base.RegisterForEvents();

		Services.Events.Register<ExplanationEvent>(ExplainWarlord);
	}


	public override void UnregisterForEvents(){
		base.UnregisterForEvents();

		Services.Events.Unregister<ExplanationEvent>(ExplainWarlord);
	}


	/// <summary>
	/// Turn the bubble explaining this warlord's behavior on if it is off, or vice-versa.
	/// </summary>
	/// <param name="e">An ExplanationEvent generated by ExplainButtonBehavior.</param>
	protected void ExplainWarlord(Event e){
		Debug.Assert(e.GetType() == typeof(ExplanationEvent), "Non-ExplanationEvent in ExplainWarlord");

		ExplanationEvent explainEvent = e as ExplanationEvent;

		if (explainEvent.buttonState == ExplainButtonBehavior.CurrentState.OK) explanationBubble.SetActive(false);
		else explanationBubble.SetActive(true);
	}


	/// <summary>
	/// In addition to normal damage effects, update the Armored Warlord's health UI.
	/// </summary>
	/// <param name="damage">The amount of damage sustained, after all modifiers.</param>
	public override void TakeDamage (int damage){
		base.TakeDamage(damage);

		healthUI.fillAmount = (float)Health/(float)startHealth;
	}
}
