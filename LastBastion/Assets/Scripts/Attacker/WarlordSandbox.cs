using System.Collections.Generic;
using UnityEngine;

public class WarlordSandbox : AttackerSandbox {


	/////////////////////////////////////////////
	/// Fields
	/////////////////////////////////////////////


	//warlords have a button that they switch on when an explanation of the warlord is needed
	protected GameObject explanationBubble;
	protected const string EXPLANATION_OBJ = "Explanation bubble";
	protected const string UI_CANVAS = "Private UI canvas";


	//UI for warlord health
	protected Transform healthSpindown;
	protected const string HEALTH_SPINDOWN_OBJ = "Health spindown";


	//rotations for the spindown die used to track warlord health
	protected Quaternion onePip;
	protected Quaternion twoPips;
	protected Quaternion threePips;
	protected Quaternion fourPips;
	protected Quaternion fivePips;
	protected Quaternion sixPips;
	protected List<Quaternion> sides = new List<Quaternion>();
	protected Vector3 oneRot = new Vector3(0.0f, 0.0f, 0.0f);
	protected Vector3 twoRot = new Vector3(0.0f, 0.0f, 270.0f);
	protected Vector3 threeRot = new Vector3(180.0f, 0.0f, 0.0f);
	protected Vector3 fourRot = new Vector3(90.0f, 0.0f, 0.0f);
	protected Vector3 fiveRot = new Vector3(0.0f, 0.0f, 90.0f);
	protected Vector3 sixRot = new Vector3(270.0f, 0.0f, 0.0f);
	protected const float MIN_Y_ROT = 0.0f;
	protected const float MAX_Y_ROT = 359.0f;


	//starting health
	protected int startHealth;



	/////////////////////////////////////////////
	/// Functions
	/////////////////////////////////////////////


	//warlords have to set up their explanation bubble and prepare to display their health
	public override void Setup(){
		base.Setup();
		healthSpindown = transform.Find(HEALTH_SPINDOWN_OBJ);
		sides = SetSpindownRotations();
		SpinDie(Health);
		explanationBubble = transform.Find(UI_CANVAS).Find(EXPLANATION_OBJ).gameObject;
		explanationBubble.SetActive(false);
	}


	/// <summary>
	/// Assign values to the quaternions that will be used to rotate the spindown tracking warlord health.
	/// </summary>
	/// <returns>A populated list of the rotations, one to six, zero-indexed.</returns>
	protected List<Quaternion> SetSpindownRotations(){
		List<Quaternion> temp = new List<Quaternion>();

		onePip = Quaternion.Euler(oneRot);
		twoPips = Quaternion.Euler(twoRot);
		threePips = Quaternion.Euler(threeRot);
		fourPips = Quaternion.Euler(fourRot);
		fivePips = Quaternion.Euler(fiveRot);
		sixPips = Quaternion.Euler(sixRot);

		temp.Add(onePip);
		temp.Add(twoPips);
		temp.Add(threePips);
		temp.Add(fourPips);
		temp.Add(fivePips);
		temp.Add(sixPips);

		return temp;
	}


	protected override void RegisterForEvents(){
		base.RegisterForEvents();

		Services.Events.Register<ExplanationEvent>(ExplainWarlord);
	}


	public override void UnregisterForEvents(){
		base.UnregisterForEvents();

		Services.Events.Unregister<ExplanationEvent>(ExplainWarlord);
	}


	/// <summary>
	/// Turn the bubble explaining this warlord's behavior on if it is off, or vice-versa.
	/// </summary>
	/// <param name="e">An ExplanationEvent generated by ExplainButtonBehavior.</param>
	protected void ExplainWarlord(Event e){
		Debug.Assert(e.GetType() == typeof(ExplanationEvent), "Non-ExplanationEvent in ExplainWarlord");

		ExplanationEvent explainEvent = e as ExplanationEvent;

		if (explainEvent.buttonState == ExplainButtonBehavior.CurrentState.OK) explanationBubble.SetActive(false);
		else explanationBubble.SetActive(true);
	}


	/// <summary>
	/// In addition to normal damage effects, update the Armored Warlord's health UI.
	/// </summary>
	/// <param name="damage">The amount of damage sustained, after all modifiers.</param>
	public override void TakeDamage (int damage){
		//determine current health
		int newHealth = Health - damage;

		//if the warlord has no health left, do nothing; the die gets picked up with the warlord
		//otherwise, change the die to the correct facing
		if (newHealth > 0) SpinDie(newHealth);

		base.TakeDamage(damage);
	}


	/// <summary>
	/// Spin the warlord's health die to show their current health.
	/// </summary>
	/// <param name="newHealth">The number to turn the die to.</param>
	protected virtual void SpinDie(int health){
		Debug.Assert(health > 0, "Trying to spin down to zero");
		Debug.Assert(health < 7, "Trying to spin above six");

		healthSpindown.rotation = sides[health - 1]; //-1 because the list is zero-indexed
		healthSpindown.Rotate(Vector3.up, Random.Range(MIN_Y_ROT, MAX_Y_ROT), Space.World); //spin the die around the Y-axis, to make it look more naturally placed
	}
}
